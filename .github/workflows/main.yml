<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jojo's Learning Game!</title>
    <style>
        body {
            font-family: 'Trebuchet MS', sans-serif;
            background-color: #64a084;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(135deg, #7F7FD5, #2b64cf, #91EAE4);
        }

        .game-box {
            max-width: 600px;
            width: 100%;
            background-color: #ffffff;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            text-align: center;
            background: linear-gradient(135deg, #43cea2, #185a9d);
            color: #fff;
        }

        .conversation {
            max-height: 300px;
            overflow-y: auto;
            margin-bottom: 20px;
            padding-right: 10px;
            background-color: #0f5aa4;
            border-radius: 10px;
            padding: 10px;
        }

        .conversation p {
            background-color: #d4e372;
            padding: 10px;
            border-radius: 10px;
            margin: 10px 0;
            font-weight: bold;
        }

        .user-message {
            background-color: #d84ae2;
            color: white;
            text-align: right;
        }

        input[type="text"] {
            width: 80%;
            padding: 10px;
            border-radius: 10px;
            border: 2px solid #00695c;
            background-color: #e0f7fa;
            font-size: 16px;
            color: #006064;
        }

        button {
            padding: 10px 20px;
            border-radius: 10px;
            background-color: #d32f2f;
            color: white;
            border: none;
            cursor: pointer;
            margin-left: 10px;
            font-size: 16px;
            font-weight: bold;
        }

        button:hover {
            background-color: #c2185b;
        }

        .reset-button {
            margin-top: 20px;
            background-color: #ffcc00;
            color: #000;
        }

        .reset-button:hover {
            background-color: #ffaa00;
        }

        .stats {
            margin: 20px 0;
            font-size: 18px;
        }

        .stats span {
            margin-right: 20px;
            font-size: 18px;
            font-weight: bold;
            background-color: #f06292;
            padding: 5px 15px;
            border-radius: 5px;
        }

        h1 {
            font-size: 32px;
            color: #FFEB3B;
            text-shadow: 2px 2px #ff6f00;
        }

        .star {
            color: gold;
            font-size: 24px;
            padding: 2px;
        }

        .timer {
            font-size: 24px;
            color: #ff4081;
            margin-bottom: 10px;
        }

        .badges {
            margin: 20px;
            font-size: 18px;
        }

        /* New Music Player Styling */
        .music-player {
            margin-top: 20px;
        }

        audio {
            width: 100%;
        }

    </style>
</head>
<body>

    <div class="game-box">
        <h1>Jojo's Game - Learn to Read!</h1>
        <div class="stats">
            <span>Lives: <strong id="lives">3</strong></span>
            <span>Score: <strong id="score">0</strong></span>
            <span>Level: <strong id="level">1</strong></span>
        </div>
        <div class="timer" id="timer">Time Left: <strong>25</strong> seconds</div>
        <div class="stars" id="stars"></div>
        <div class="conversation" id="conversation">
            <!-- Chat conversation will appear here -->
        </div>
        <input type="text" id="userInput" placeholder="Type your answer..." />
        <button onclick="sendMessage()">Send</button>

        <!-- Music Player -->
        <div class="music-player">
            <h3>Background Music</h3>
            <audio controls>
                <source src="/Users/doopy/Desktop/Reading-Assistant/index/reading_game_colored.html" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>
        </div>

        <div class="badges" id="badges">
            <!-- Badges will be displayed here -->
        </div>

        <!-- Reset Button -->
        <button class="reset-button" onclick="resetGame()">Reset Game</button>
    </div>

    <script>
        let currentStep = 0;
        let currentWord = '';
        let currentSentence = '';
        let score = 0;
        let lives = localStorage.getItem('lives') ? parseInt(localStorage.getItem('lives')) : 3;
        let level = localStorage.getItem('level') ? parseInt(localStorage.getItem('level')) : 1;
        let timer;
        let timeLeft = 25;
        let incorrectAttempts = 0;

        const vocabulary = [
            { word: 'apple', meaning: 'a fruit that is red or green.' },
            { word: 'dog', meaning: 'a domesticated animal often kept as a pet.' },
            { word: 'sun', meaning: 'the star at the center of our solar system.' },
            { word: 'rocket', meaning: 'a vehicle that travels into space.' },
            { word: 'book', meaning: 'a set of written pages bound together.' }
        ];

        const sentences = [
            { sentence: 'The cat sits on the mat.', question: 'Where does the cat sit?', answer: 'mat' },
            { sentence: 'The dog runs after the ball.', question: 'What does the dog run after?', answer: 'ball' },
            { sentence: 'The sun shines in the sky.', question: 'Where does the sun shine?', answer: 'sky' }
        ];

        const conversation = document.getElementById('conversation');
        const livesDisplay = document.getElementById('lives');
        const scoreDisplay = document.getElementById('score');
        const levelDisplay = document.getElementById('level');
        const timerDisplay = document.getElementById('timer');
        const starsDisplay = document.getElementById('stars');
        const badgesDisplay = document.getElementById('badges');

        function addMessageToChat(message, sender) {
            const messageElement = document.createElement('p');
            messageElement.textContent = message;
            if (sender === 'user') {
                messageElement.classList.add('user-message');
            }
            conversation.appendChild(messageElement);
            conversation.scrollTop = conversation.scrollHeight;
        }

        function sendMessage() {
            const userInput = document.getElementById('userInput').value.trim();
            if (userInput === '') return;

            addMessageToChat(userInput, 'user');
            document.getElementById('userInput').value = '';

            clearInterval(timer); // Stop timer once an answer is submitted

            processResponse(userInput);
        }

        function processResponse(userInput) {
            if (lives === 0) {
                addMessageToChat("Game Over! You've lost all your lives.", 'ai');
                speak("Game Over! You've lost all your lives.");
                return;
            }

            if (currentStep === 0) {
                // Introduction: Ask to spell a word
                const wordInfo = vocabulary[Math.floor(Math.random() * vocabulary.length)];
                currentWord = wordInfo.word;
                addMessageToChat(`Level ${level}: Can you spell the word: "${currentWord}"? It means: ${wordInfo.meaning}`, 'ai');
                speak(`Level ${level}: Can you spell the word: ${currentWord}? It means: ${wordInfo.meaning}`);
                startTimer();
                currentStep = 1;
            } else if (currentStep === 1) {
                // Check spelling
                checkSpelling(userInput);
            } else if (currentStep === 2) {
                // Reading comprehension
                checkComprehension(userInput);
            } else {
                currentStep = 0;
                processResponse();
            }
        }

        function checkSpelling(userInput) {
            if (userInput.toLowerCase() === currentWord.toLowerCase()) {
                addMessageToChat('Correct! Well done!', 'ai');
                speak("Correct! Well done!");
                score++;
                scoreDisplay.textContent = score;
                awardStar(); // Award a star for correct answers
                checkAchievements(); // Check for achievements
            } else {
                incorrectAttempts++;
                if (incorrectAttempts >= 2) {
                    addMessageToChat(`Hint: The first letter is "${currentWord.charAt(0)}".`, 'ai');
                    speak(`Hint: The first letter is ${currentWord.charAt(0)}`);
                }
                addMessageToChat(`Not quite. The correct spelling is "${currentWord}".`, 'ai');
                speak(`Not quite. The correct spelling is ${currentWord}`);
                loseLife();
            }

            // Move to reading comprehension
            addMessageToChat("Let's try a reading comprehension exercise!", 'ai');
            speak("Let's try a reading comprehension exercise!");
            const sentenceInfo = sentences[Math.floor(Math.random() * sentences.length)];
            currentSentence = sentenceInfo.sentence;
            addMessageToChat(`Read this sentence: "${currentSentence}"`, 'ai');
            speak(`Read this sentence: ${currentSentence}`);
            addMessageToChat(sentenceInfo.question, 'ai');
            speak(sentenceInfo.question);

            startTimer();
            currentStep = 2;
        }

        function checkComprehension(userInput) {
            const sentenceInfo = sentences.find(sentence => sentence.sentence === currentSentence);
            if (userInput.toLowerCase() === sentenceInfo.answer.toLowerCase()) {
                addMessageToChat('Great job! You understood the sentence!', 'ai');
                speak("Great job! You understood the sentence!");
                score++;
                scoreDisplay.textContent = score;
                awardStar(); // Award a star for correct comprehension
                checkAchievements(); // Check for achievements
            } else {
                addMessageToChat(`Not quite. The correct answer was "${sentenceInfo.answer}".`, 'ai');
                speak(`Not quite. The correct answer was ${sentenceInfo.answer}`);
                loseLife();
            }

            // Increase level and continue
            level++;
            levelDisplay.textContent = level;
            localStorage.setItem('level', level); // Save level progress
            localStorage.setItem('lives', lives); // Save lives progress
            currentStep = 0;
            processResponse();
        }

        function loseLife() {
            lives--;
            livesDisplay.textContent = lives;
            if (lives === 0) {
                addMessageToChat("Oh no! You've lost all your lives. Game Over!", 'ai');
                speak("Oh no! You've lost all your lives. Game Over!");
            }
        }

        function awardStar() {
            const star = document.createElement('span');
            star.classList.add('star');
            star.textContent = '★';
            starsDisplay.appendChild(star);
        }

        function speak(text) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'en-US';
            window.speechSynthesis.speak(utterance);
        }

        function startTimer() {
            timeLeft = 25;
            timerDisplay.innerHTML = `Time Left: <strong>${timeLeft}</strong> seconds`;
            timer = setInterval(function () {
                timeLeft--;
                timerDisplay.innerHTML = `Time Left: <strong>${timeLeft}</strong> seconds`;
                if (timeLeft <= 0) {
                    clearInterval(timer);
                    addMessageToChat("Time's up! You lost a life.", 'ai');
                    speak("Time's up! You lost a life.");
                    loseLife();
                    currentStep = 0;
                    processResponse(); // Restart the game with a new word
                }
            }, 1000);
        }

        function checkAchievements() {
            if (score >= 10) {
                addMessageToChat("Achievement unlocked: 10 correct answers!", 'ai');
                speak("Achievement unlocked: 10 correct answers!");
                awardBadge("10 Correct Answers");
            }
            // Add more achievements if necessary
        }

        function awardBadge(name) {
            const badge = document.createElement('div');
            badge.textContent = name;
            badge.style.backgroundColor = 'gold';
            badge.style.padding = '10px';
            badge.style.borderRadius = '5px';
            badgesDisplay.appendChild(badge);
        }

        // Function to reset the game
        function resetGame() {
            clearInterval(timer); // Stop any running timer
            score = 0;
            lives = 3;
            level = 1;
            timeLeft = 25;

            // Update the display
            scoreDisplay.textContent = score;
            livesDisplay.textContent = lives;
            levelDisplay.textContent = level;
            timerDisplay.innerHTML = `Time Left: <strong>${timeLeft}</strong> seconds`;
            starsDisplay.innerHTML = '';  // Clear the stars

            // Clear localStorage for fresh start
            localStorage.removeItem('lives');
            localStorage.removeItem('score');
            localStorage.removeItem('level');

            addMessageToChat("The game has been reset.", 'ai');
            speak("The game has been reset.");
        }

        // Start the first interaction when the page loads
        processResponse();
    </script>

</body>
</html>
